# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches:
    - main
    - ci/**

jobs:
  # Run integration test
  integrationTest:

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Check Java version
      run: java -version

    - name: Run tests
      run: ./mvnw clean integration-test

  # Define maven job to build java application
  build:

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Check Java version
      run: java -version

    - name: Build with Maven
      run: ./mvnw clean package verify
      
    - name: Upload artifact for Docker job
      uses: actions/upload-artifact@v4
      with:
        name: java-app
        path: '${{github.workspace}}/target/*.jar'

  # Define docker job to create and publish Docker Image
  docker:

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    needs:
    - integrationTest
    - build

    steps:
    - uses: actions/checkout@v4

    - name: Download artifact for Docker job
      uses: actions/download-artifact@v4
      with:
        name: java-app
    
    - name: Login into Docker
      run: docker login ghcr.io -u 4iG-AdamNok -p ${{ github.token }}

    - name: Build Docker Image
      run: docker build . -t ghcr.io/4ig-adamnok/cubix/1/optional/app:springboot

    - name: Publish Docker Image
      run: docker push ghcr.io/4ig-adamnok/cubix/1/optional/app:springboot

  # Define verify job to verify the created Docker Image from previous job
  verify:

    runs-on: ubuntu-latest

    needs: docker

    steps:
    - name: Run Docker Image and then call `cubix/test` HTTP endpoint
      run: |
        docker run -d --name test -p 8080:8080 ghcr.io/4ig-adamnok/cubix/1/optional/app:springboot > /dev/null
        sleep 10
        curl --fail http://localhost:8080/demo/message
        RESULT=$?
        if [ $RESULT -ne 0 ]; then
          echo "Verification failed, here are the logs"
          docker logs test
        fi
          docker stop test > /dev/null
          docker rm test > /dev/null
          exit $RESULT
